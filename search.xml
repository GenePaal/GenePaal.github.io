<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>KMP</title>
    <url>/2020/10/27/KMP/</url>
    <content><![CDATA[<p>KMP算法，代码写的不好看，也不简洁，自己手敲的，也算是开天辟地了</p>
<p>后续持续优化代码 + 思路详细讲解，只希望让后来者少踩坑，起码不要踩我踩过的坑 T^T</p>
<a id="more"></a>

<p>先附上代码，后续更新详细讲解</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始手写KMP   自我感觉还是不太好的</span></span><br><span class="line"><span class="comment">// 串的底层用静态数组实现</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> str[MAX_SIZE];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">getNext</span><span class="params">(str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    str S = <span class="string">"dab5cdabcdabdebdedabcd1abdedabcd6abde"</span>;</span><br><span class="line">    str T = <span class="string">"dabcdabde"</span>;</span><br><span class="line">    <span class="keyword">int</span> lengthT = getLength(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lengthT);</span><br><span class="line">    <span class="keyword">int</span> lengthS = getLength(S);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lengthS);</span><br><span class="line">    <span class="keyword">int</span> *next = getNext(T);</span><br><span class="line">    <span class="comment">// 打印next数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lengthT; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, next[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">int</span> i, j = <span class="number">0</span>, flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= lengthS - lengthT;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (T[j] &amp;&amp; (S[i] == T[j]))</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == lengthT)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, i - lengthT);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"找不到该子串\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(str T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (T[index++])</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">return</span> index - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">getNext</span><span class="params">(str T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = getLength(T);</span><br><span class="line">    <span class="keyword">int</span> *next = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * length);</span><br><span class="line">    <span class="comment">// next数组的前两个</span></span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 当前字符的上一个字符的最大匹配数</span></span><br><span class="line">        <span class="keyword">int</span> k = next[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (T[k] == T[i - <span class="number">1</span>])</span><br><span class="line">            next[i] = k + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (next[k] != <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                k = next[k];</span><br><span class="line">                <span class="keyword">if</span> (T[k] == T[i - <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    next[i] = k + <span class="number">1</span>;</span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (next[k] == <span class="number">-1</span> &amp;&amp; flag)</span><br><span class="line">                next[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>KMP</tag>
      </tags>
  </entry>
  <entry>
    <title>339随机值日小程序源码</title>
    <url>/2020/09/04/339%E9%9A%8F%E6%9C%BA%E5%80%BC%E6%97%A5%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p>为宿舍内公平值日设计的一个小程序（手动滑稽），点击“阅读全文”查看源码以及使用说明    </p>
<a id="more"></a>

<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ol>
<li>直接将下面的代码复制到C语言编译器里运行即可</li>
<li>每个人摇到几号，则周几值日，摇到8号的不用值日</li>
</ol>
<h2 id="源码附上"><a href="#源码附上" class="headerlink" title="源码附上"></a>源码附上</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">member</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="built_in">max</span>];</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">&#125; Member;</span><br><span class="line"></span><br><span class="line">Member arr[<span class="built_in">max</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>, j, i, flag, t;</span><br><span class="line">    <span class="built_in">strcpy</span>(arr[<span class="number">0</span>].name, <span class="string">"曹曾超"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(arr[<span class="number">1</span>].name, <span class="string">"王梓臣"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(arr[<span class="number">2</span>].name, <span class="string">"贾金澎"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(arr[<span class="number">3</span>].name, <span class="string">"安凯晨"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(arr[<span class="number">4</span>].name, <span class="string">"李艾兴"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(arr[<span class="number">5</span>].name, <span class="string">"李政尧"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(arr[<span class="number">6</span>].name, <span class="string">"郭艺萌"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(arr[<span class="number">7</span>].name, <span class="string">"郝龙祥"</span>);</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">while</span> (s != <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        j = rand() % <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s; i++)</span><br><span class="line">            <span class="keyword">if</span> (arr[i].number == j)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[s].number = j;</span><br><span class="line">            s++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d   %s\n"</span>, arr[i].number + <span class="number">1</span>, arr[i].name);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>日常应用小程序</category>
      </categories>
      <tags>
        <tag>日常应用小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>RandomDuty(7)</title>
    <url>/2020/09/19/RandomDuty-7/</url>
    <content><![CDATA[<p>有一个兄弟转专业走了T^T, 现在宿舍里有七个人，改进一下代码，取消了文件缓存机制</p>
<a id="more"></a>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMBERONE <span class="meta-string">"曹曾超"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMBERTWO <span class="meta-string">"贾金澎"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMBERTHREE <span class="meta-string">"安凯晨"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMBERFOUR <span class="meta-string">"李艾兴"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMBERFIVE <span class="meta-string">"李政尧"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMBERSIX <span class="meta-string">"郭艺萌"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMBERSEVEN <span class="meta-string">"郝龙祥"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">member</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[MAXN];</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">&#125; Member;</span><br><span class="line"></span><br><span class="line">Member arr[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> brr[MAX] = &#123;<span class="number">0</span>&#125;, crr[MAX];</span><br><span class="line">    <span class="keyword">int</span> i, j, t, flag, len;</span><br><span class="line">    Member temp;</span><br><span class="line">    <span class="comment">// 拷贝名字</span></span><br><span class="line">    <span class="built_in">strcpy</span>(arr[<span class="number">0</span>].name, MEMBERONE);</span><br><span class="line">    <span class="built_in">strcpy</span>(arr[<span class="number">1</span>].name, MEMBERTWO);</span><br><span class="line">    <span class="built_in">strcpy</span>(arr[<span class="number">2</span>].name, MEMBERTHREE);</span><br><span class="line">    <span class="built_in">strcpy</span>(arr[<span class="number">3</span>].name, MEMBERFOUR);</span><br><span class="line">    <span class="built_in">strcpy</span>(arr[<span class="number">4</span>].name, MEMBERFIVE);</span><br><span class="line">    <span class="built_in">strcpy</span>(arr[<span class="number">5</span>].name, MEMBERSIX);</span><br><span class="line">    <span class="built_in">strcpy</span>(arr[<span class="number">6</span>].name, MEMBERSEVEN);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心代码  ↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始产生7个互相不重复的1 - 7内的数字</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 遍历brr数组，得到哪些数还没有生成</span></span><br><span class="line">        <span class="comment">// 把没有生成的数存在数组crr中</span></span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(crr, <span class="number">0</span>, <span class="keyword">sizeof</span>(crr));</span><br><span class="line">        <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; <span class="number">7</span>; t++)</span><br><span class="line">            <span class="keyword">if</span> (brr[t] == <span class="number">0</span>)</span><br><span class="line">                crr[len++] = t + <span class="number">1</span>;</span><br><span class="line">        srand(time(<span class="literal">NULL</span>));</span><br><span class="line">        j = rand() % len;</span><br><span class="line">        arr[i].count = crr[j];</span><br><span class="line">        brr[crr[j] - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">6</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">            <span class="keyword">if</span> (arr[j].count &gt; arr[j + <span class="number">1</span>].count)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心代码  ↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提升用户体验</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (i)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"周一 "</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"周二 "</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"周三 "</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"周四 "</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"周五 "</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"周六 "</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"周日 "</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, arr[i].name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>日常应用小程序</category>
      </categories>
      <tags>
        <tag>随机值日小程序(7人版，无缓存)</tag>
      </tags>
  </entry>
  <entry>
    <title>reverse the linkList</title>
    <url>/2020/09/23/reverse-the-linkList/</url>
    <content><![CDATA[<p>链表的头插和逆置操作，很有技巧性，很值得思考</p>
<a id="more"></a>


<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node, *pList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(pList *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(pList)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReverseOrder</span><span class="params">(pList*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	pList pHead = <span class="literal">NULL</span>;</span><br><span class="line">	Reverse(&amp;pHead);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"对空链表头插5个结点:\n"</span>);</span><br><span class="line">	Print(pHead);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"头插完之后，将链表元素转置:\n"</span>);</span><br><span class="line">	ReverseOrder(&amp;pHead);</span><br><span class="line">	Print(pHead);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(pList * ppHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	pList pNewNode;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		pNewNode = (pList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">		pNewNode-&gt;data = i;</span><br><span class="line">		pNewNode -&gt;next = *ppHead;</span><br><span class="line">		*ppHead = pNewNode;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(pList phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	pList temp = phead;</span><br><span class="line">	<span class="keyword">while</span>(temp != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, temp-&gt;data);</span><br><span class="line">		temp = temp -&gt; next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReverseOrder</span><span class="params">(pList* pphead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	pList p = *pphead, q = (*pphead) -&gt;next;</span><br><span class="line">	*pphead = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">while</span>(q != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p -&gt; next = *pphead;</span><br><span class="line">		*pphead = p;</span><br><span class="line">		p = q;</span><br><span class="line">		q = q-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	p-&gt;next = *pphead;</span><br><span class="line">	*pphead = p;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>链表操作</category>
      </categories>
      <tags>
        <tag>链表头插和逆置</tag>
      </tags>
  </entry>
  <entry>
    <title>RandomDuty</title>
    <url>/2020/09/12/RandomDuty/</url>
    <content><![CDATA[<p>为宿舍内公平值日设计的一个小程序（升级版），点击“阅读全文”查看源码以及使用说明</p>
<a id="more"></a>

<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><ol>
<li>编辑代码，根据本宿舍人名更改#define定义的8个成员名。</li>
<li>创建一个<code>.txt</code>文件，在文件中键入数字0 <code>(不要有任何其它字符，例如空格，回车)</code></li>
<li>将代码中 #define定义的FILELOCATION更改为你刚才创建的<code>.txt</code>文件的绝对路径</li>
<li>在C语言IED中运行代码。</li>
</ol>
<h3 id="代码附上"><a href="#代码附上" class="headerlink" title="代码附上"></a>代码附上</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILELOCATION <span class="meta-string">"D:info.txt"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMBERONE <span class="meta-string">"曹曾超"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMBERTWO <span class="meta-string">"王梓臣"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMBERTHREE <span class="meta-string">"贾金澎"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMBERFOUR <span class="meta-string">"安凯晨"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMBERFIVE <span class="meta-string">"李艾兴"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMBERSIX <span class="meta-string">"李政尧"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMBERSEVEN <span class="meta-string">"郭艺萌"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMBEREIGHT <span class="meta-string">"郝龙祥"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">member</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[MAX];</span><br><span class="line">    <span class="keyword">int</span> cache[MAX];</span><br><span class="line">&#125; Member;</span><br><span class="line"></span><br><span class="line">Member body[MAX];</span><br><span class="line"><span class="keyword">int</span> brr[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> Brr[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> crr[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> flag, arr[MAX] = &#123;<span class="number">0</span>&#125;, s = <span class="number">0</span>, j, i, temp = <span class="number">1</span>, calculate = <span class="number">1</span>, len = <span class="number">0</span>, x, p, q;</span><br><span class="line">    <span class="built_in">strcpy</span>(body[<span class="number">0</span>].name, MEMBERONE);</span><br><span class="line">    <span class="built_in">strcpy</span>(body[<span class="number">1</span>].name, MEMBERTWO);</span><br><span class="line">    <span class="built_in">strcpy</span>(body[<span class="number">2</span>].name, MEMBERTHREE);</span><br><span class="line">    <span class="built_in">strcpy</span>(body[<span class="number">3</span>].name, MEMBERFOUR);</span><br><span class="line">    <span class="built_in">strcpy</span>(body[<span class="number">4</span>].name, MEMBERFIVE);</span><br><span class="line">    <span class="built_in">strcpy</span>(body[<span class="number">5</span>].name, MEMBERSIX);</span><br><span class="line">    <span class="built_in">strcpy</span>(body[<span class="number">6</span>].name, MEMBERSEVEN);</span><br><span class="line">    <span class="built_in">strcpy</span>(body[<span class="number">7</span>].name, MEMBEREIGHT);</span><br><span class="line">    fp = fopen(FILELOCATION, <span class="string">"r"</span>);</span><br><span class="line">    <span class="built_in">fscanf</span>(fp, <span class="string">"%d"</span>, &amp;flag);</span><br><span class="line">    <span class="comment">// 新轮回的工作</span></span><br><span class="line">    <span class="comment">// 如果flag = 8 或 0，则需要重新开始下一个轮回。</span></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">8</span> || flag == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"旧数据已满一个周期，已清空\n"</span>);</span><br><span class="line">        fclose(fp);</span><br><span class="line">        fp = fopen(FILELOCATION, <span class="string">"w"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">"%d\n"</span>, temp);</span><br><span class="line"></span><br><span class="line">        srand(time(<span class="literal">NULL</span>));</span><br><span class="line">        <span class="comment">// 随机，无重复地产生 1 - 8 , 8个数，存储到数组arr中, 并写入缓存的txt文件中</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"新数据为:\n"</span>);</span><br><span class="line">        <span class="keyword">while</span> (s != <span class="number">8</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = <span class="number">1</span>;</span><br><span class="line">            j = rand() % <span class="number">8</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] == j)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[s++] = j;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s %d\n"</span>, body[i].name, j);</span><br><span class="line">                <span class="built_in">fprintf</span>(fp, <span class="string">"%d\n"</span>, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"新数据缓存成功...\n"</span>);</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// flag是几，就说明当前每行有几个数</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        getc(fp);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"旧数据:\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s"</span>, body[i].name);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; flag; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">fscanf</span>(fp, <span class="string">"%d"</span>, &amp;body[i].cache[j]);</span><br><span class="line">                brr[i][body[i].cache[j] - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                Brr[i][body[i].cache[j] - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" %d"</span>, body[i].cache[j]);</span><br><span class="line">                getc(fp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"正在计算新的值日顺序......\n"</span>);</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">memset</span>(crr, <span class="number">0</span>, <span class="keyword">sizeof</span>(crr));</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (brr[i][j] == <span class="number">0</span>)</span><br><span class="line">                    crr[len++] = j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// crr数组里现在存的是解的范围,一共有len个数</span></span><br><span class="line">            srand(time(<span class="literal">NULL</span>));</span><br><span class="line">            <span class="comment">// len = 0说明怼出来的数无解，需要回溯</span></span><br><span class="line">            <span class="keyword">if</span>(len == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(p = <span class="number">0</span>; p &lt; <span class="number">8</span>; p++)</span><br><span class="line">                    <span class="keyword">for</span>(q = <span class="number">0</span>; q &lt; <span class="number">8</span>; q++)</span><br><span class="line">                        brr[p][q] = Brr[p][q];</span><br><span class="line">                i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (len != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                j = rand() % len;</span><br><span class="line">                body[i].cache[flag] = crr[j];</span><br><span class="line">                <span class="keyword">for</span> (x = i + <span class="number">1</span>; x &lt; <span class="number">8</span>; x++)</span><br><span class="line">                    brr[x][crr[j] - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">8</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"计算完成!\n"</span>);</span><br><span class="line">        flag++;</span><br><span class="line">        <span class="comment">// 打印结构体数组，测试一下</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"新数据:\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s"</span>, body[i].name);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; flag; j++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" %d"</span>, body[i].cache[j]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"正在将新数据写入缓存文件中...\n"</span>);</span><br><span class="line">        fclose(fp);</span><br><span class="line">        fp = fopen(FILELOCATION, <span class="string">"w"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">"%d\n"</span>, flag);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; flag; j++)</span><br><span class="line">                <span class="built_in">fprintf</span>(fp, <span class="string">"%d "</span>, body[i].cache[j]);</span><br><span class="line">            <span class="built_in">fprintf</span>(fp, <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"写入成功!\n"</span>);</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>日常应用小程序</category>
      </categories>
      <tags>
        <tag>随机值日小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>problem</title>
    <url>/2020/09/29/problem/</url>
    <content><![CDATA[<p>这个问题困扰我太久了，我还是去研究新算法得了，因为产生的是随机数，我都不知道我的思路还会有多少缺陷，还可能算到无解的情况。</p>
<a id="more"></a>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NAME 30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILE_LOCATION <span class="meta-string">"D:/info.txt"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUMBER1 <span class="meta-string">"a"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUMBER2 <span class="meta-string">"b"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUMBER3 <span class="meta-string">"c"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUMBER4 <span class="meta-string">"d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUMBER5 <span class="meta-string">"e"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUMBER6 <span class="meta-string">"f"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUMBER7 <span class="meta-string">"g"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUMBER8 <span class="meta-string">"h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">number</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[MAX_NAME];</span><br><span class="line"></span><br><span class="line">&#125; Number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i, j, lastRounds;</span><br><span class="line"><span class="keyword">int</span> arr[MAX], brr[MAX], crr[MAX], boolx1[MAX];</span><br><span class="line"><span class="keyword">int</span> data[MAX][MAX], boolx2[MAX][MAX], BOOLx2[MAX][MAX];</span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">Number number[MAX];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机生成8个两两不相同的[1,8]范围内的整数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RandomCount</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyStrcpy</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadAndPrintData</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Calculate</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAndWriteData</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Calculate_6</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    MyStrcpy();</span><br><span class="line">    fp = fopen(FILE_LOCATION, <span class="string">"r"</span>);</span><br><span class="line">    <span class="built_in">fscanf</span>(fp, <span class="string">"%d"</span>, &amp;lastRounds);</span><br><span class="line">    <span class="keyword">if</span> (lastRounds == <span class="number">0</span> || lastRounds == <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fclose(fp);</span><br><span class="line">        fp = fopen(FILE_LOCATION, <span class="string">"w"</span>);</span><br><span class="line">        RandomCount();</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">"%d\n"</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (lastRounds == <span class="number">8</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"旧数据已满，已清空...\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"数据为空，需要创建新数据...\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"新数据为:\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s   %d\n"</span>, number[i].name, arr[i]);</span><br><span class="line">            <span class="built_in">fprintf</span>(fp, <span class="string">"%d\n"</span>, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (lastRounds == <span class="number">6</span>)</span><br><span class="line">        Calculate_6();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 文件依然处于开启状态，读取完数据以后方可关闭</span></span><br><span class="line">        getc(fp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将旧数据读取到data数组中，并打印</span></span><br><span class="line">        ReadAndPrintData(lastRounds);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// √</span></span><br><span class="line">        <span class="comment">// 可以关闭文件了</span></span><br><span class="line">        fclose(fp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始罪恶的计算</span></span><br><span class="line">        Calculate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印新数据，并保存到缓存文件中</span></span><br><span class="line">        PrintAndWriteData();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RandomCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">int</span> lenC;</span><br><span class="line">    <span class="comment">// arr存放这八个数字</span></span><br><span class="line">    <span class="comment">// brr为布尔类型数组</span></span><br><span class="line">    <span class="comment">// crr为可用的数字</span></span><br><span class="line">    <span class="comment">// arr 和 brr 是需要每次循环都进行缓存的， crr每次循环都要大变样</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 初始化lenC</span></span><br><span class="line">        lenC = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            srand(time(<span class="literal">NULL</span>));</span><br><span class="line">            arr[i] = rand() % <span class="number">8</span> + <span class="number">1</span>;</span><br><span class="line">            brr[arr[i] - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历布尔数组，从而确定没有使用的数字，存到crr数组里</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">            <span class="keyword">if</span> (brr[j] == <span class="number">0</span>)</span><br><span class="line">                crr[lenC++] = j;</span><br><span class="line">        <span class="comment">// crr数组的长度为lenC，即crr里有lenC个数</span></span><br><span class="line">        srand(time(<span class="literal">NULL</span>));</span><br><span class="line">        number = crr[rand() % lenC];</span><br><span class="line">        arr[i] = number + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 把number存进arr数组以后，记得在布尔数组里把对应的位置的数置为1</span></span><br><span class="line">        brr[number] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyStrcpy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(number[<span class="number">0</span>].name, NUMBER1);</span><br><span class="line">    <span class="built_in">strcpy</span>(number[<span class="number">1</span>].name, NUMBER2);</span><br><span class="line">    <span class="built_in">strcpy</span>(number[<span class="number">2</span>].name, NUMBER3);</span><br><span class="line">    <span class="built_in">strcpy</span>(number[<span class="number">3</span>].name, NUMBER4);</span><br><span class="line">    <span class="built_in">strcpy</span>(number[<span class="number">4</span>].name, NUMBER5);</span><br><span class="line">    <span class="built_in">strcpy</span>(number[<span class="number">5</span>].name, NUMBER6);</span><br><span class="line">    <span class="built_in">strcpy</span>(number[<span class="number">6</span>].name, NUMBER7);</span><br><span class="line">    <span class="built_in">strcpy</span>(number[<span class="number">7</span>].name, NUMBER8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadAndPrintData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"旧数据为:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s  "</span>, number[i].name);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; lastRounds; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fscanf</span>(fp, <span class="string">"%d "</span>, &amp;data[i][j]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, data[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 吸收文件内的换行，或者最后一行的EOF</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lenC, counts, number, huisu = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// boolx2 二维布尔数组，哪个元素为一，那么该元素的下标加 1 这个数，已经产生过了</span></span><br><span class="line">    <span class="comment">// 本次计算需要的数据有，data二维数组里的内容</span></span><br><span class="line">    <span class="comment">// bool二维数组用来计每次横向已经占有的数据</span></span><br><span class="line">    <span class="comment">// 一维布尔数组用来计纵向产生的数据</span></span><br><span class="line">    <span class="comment">// 遍历二维布尔数组的对应行，和一维布尔数组，若都为0，则该数是解，将其放到crr数组里</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; lastRounds; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            boolx2[i][data[i][j] - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// BOOLx2备份数据，用于回溯</span></span><br><span class="line">            BOOLx2[i][data[i][j] - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (counts = <span class="number">0</span>; counts &lt; <span class="number">8</span>; counts++)</span><br><span class="line">    &#123;</span><br><span class="line">        lenC = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(crr, <span class="number">0</span>, <span class="keyword">sizeof</span>(crr));</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!boolx2[counts][j])</span><br><span class="line">            &#123;</span><br><span class="line">                crr[lenC++] = j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// crr数组里存的是第 counts 行，横纵都未出现过的数</span></span><br><span class="line">        srand(time(<span class="literal">NULL</span>));</span><br><span class="line">        <span class="keyword">if</span> (lenC)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// lenC != 0 ，往下算就好</span></span><br><span class="line">            number = rand() % lenC;</span><br><span class="line">            data[counts][lastRounds] = crr[number];</span><br><span class="line">            <span class="comment">// 存完crr[number]以后，还需要把二维布尔数组中当前行以下的每一列中</span></span><br><span class="line">            <span class="comment">// 下标为 crr[number] - 1的元素置为 1</span></span><br><span class="line">            <span class="keyword">for</span> (i = counts + <span class="number">1</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">                boolx2[i][crr[number] - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"回溯次数 %d次\n"</span>, huisu++);</span><br><span class="line">            <span class="comment">// lenC == 0 , 运气不好，怼到无解的情况了， 需要回溯呀，从头开始算吧， 哎！</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; lastRounds; j++)</span><br><span class="line">                    boolx2[i][j] = BOOLx2[i][j];</span><br><span class="line">            counts = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    lastRounds++;</span><br><span class="line">    <span class="comment">// 可能会出现无解的情况，因此，记得回溯！！</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAndWriteData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fp = fopen(FILE_LOCATION, <span class="string">"w"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"新数据为:\n"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">"%d\n"</span>, lastRounds);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s  "</span>, number[i].name);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; lastRounds; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(fp, <span class="string">"%d "</span>, data[i][j]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, data[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Calculate_6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> crr[MAX * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>, temp, t;</span><br><span class="line">    <span class="comment">// 把数据录到布尔数组里，然后确定解</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; lastRounds; j++)</span><br><span class="line">            boolx2[i][data[i][j] - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; lastRounds; j++)</span><br><span class="line">            <span class="keyword">if</span> (boolx2[i][data[i][j] - <span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">                crr[len++] = data[i][j];</span><br><span class="line">    <span class="comment">// crr数组长度最后一定是16， 下标从 0 - 15</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        srand(time(<span class="literal">NULL</span>));</span><br><span class="line">        <span class="comment">// 第一次，先从第一个和第二个元素中选择一个</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            j = rand() % <span class="number">2</span>;</span><br><span class="line">            data[<span class="number">0</span>][lastRounds] = crr[j];</span><br><span class="line">            temp = crr[j];</span><br><span class="line">            crr[j] = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(t = <span class="number">0</span>; t &lt; len; t++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp == crr[t])</span><br><span class="line">            &#123;</span><br><span class="line">                crr[t] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (t % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = crr[t + <span class="number">1</span>];</span><br><span class="line">                    data[t / <span class="number">2</span> + <span class="number">1</span>][lastRounds] =  crr[t + <span class="number">1</span>];</span><br><span class="line">                    crr[t + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    temp = crr[t - <span class="number">1</span>];</span><br><span class="line">                    data[t / <span class="number">2</span> + <span class="number">1</span>][lastRounds] =  crr[t - <span class="number">1</span>];</span><br><span class="line">                    crr[t - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">4 5 6 7 2 3 </span><br><span class="line">2 7 3 6 4 8 </span><br><span class="line">6 4 2 5 3 7 </span><br><span class="line">5 6 8 3 1 4 </span><br><span class="line">8 2 7 1 6 5 </span><br><span class="line">1 3 5 8 2 6 </span><br><span class="line">7 1 4 2 8 3 </span><br><span class="line">3 8 1 4 5 2</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>矩阵运算问题</category>
      </categories>
      <tags>
        <tag>问题问题问题</tag>
      </tags>
  </entry>
  <entry>
    <title>双向链表基本操作</title>
    <url>/2020/10/12/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;双向链表的基本操作</p>
<ol>
<li>初始化一个空的双向链表</li>
<li>尾插添加结点</li>
<li>顺序随机掉头逆序打印双向链表</li>
<li>按序号添加结点</li>
<li>按序号删除结点 </li>
</ol>
<a id="more"></a>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 双向链表</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">linkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">linkList</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">linkList</span> *<span class="title">prior</span>;</span></span><br><span class="line">&#125; node, *<span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个空的双向链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(<span class="built_in">list</span> *ppHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">list</span> p = (<span class="built_in">list</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    *ppHead = p;</span><br><span class="line">    p-&gt;data = <span class="number">0</span>;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向双向链表中批量添加5个值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddNode</span><span class="params">(<span class="built_in">list</span> pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">list</span> temp = pHead;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">list</span> p = (<span class="built_in">list</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        temp-&gt;next = p;</span><br><span class="line">        p-&gt;data = i + <span class="number">1</span>;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;prior = temp;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印双向链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(<span class="built_in">list</span> pFirstNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 先打印双向链表</span></span><br><span class="line">    <span class="built_in">list</span> temp = pFirstNode;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"显示双向链表信息:\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, temp-&gt;data);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顺序然后逆序打印双向链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OrderAndReverseOrderPrint</span><span class="params">(<span class="built_in">list</span> pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">list</span> temp = pHead;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"利用双链表的特性实现先顺序打印然后逆序打印\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, temp-&gt;next-&gt;data);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 现在temp的值为最后一个结点的地址,然后顺着打印即可</span></span><br><span class="line">    <span class="keyword">while</span> (temp != pHead)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, temp-&gt;data);</span><br><span class="line">        temp = temp-&gt;prior;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按序号添加一个结点，i为序号，data为数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddBySerial</span><span class="params">(<span class="built_in">list</span> pHead, <span class="keyword">int</span> i, <span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 添加结点，要添加的结点的前一个结点的范围是</span></span><br><span class="line">    <span class="comment">// 0结点(头结点)一直到最后的NULL结点</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"在第 %d 个结点处插入数据为 %d 的结点\n"</span>, i, data);</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">list</span> temp = pHead;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i - <span class="number">1</span> &amp;&amp; temp != <span class="literal">NULL</span>; j++)</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span> || j &gt; i - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"传入的序号 %d 不在允许插入的范围内"</span>, i);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果是要尾插，那么还需要特殊拿出来考虑，因为尾结点的后面没有结点了</span></span><br><span class="line">    <span class="built_in">list</span> p = (<span class="built_in">list</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    p-&gt;data = data;</span><br><span class="line">    <span class="keyword">if</span> (temp-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;prior = temp;</span><br><span class="line">        temp-&gt;next = p;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next = temp-&gt;next;</span><br><span class="line">    temp-&gt;next-&gt;prior = p;</span><br><span class="line">    p-&gt;prior = temp;</span><br><span class="line">    temp-&gt;next = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照序号删除一个结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteSerial</span><span class="params">(<span class="built_in">list</span> pHead, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// temp 现在指向第一个结点</span></span><br><span class="line">    <span class="built_in">list</span> temp = pHead-&gt;next;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"删除序号为 %d 的结点\n"</span>, i);</span><br><span class="line">    <span class="comment">// 不同于单链表的删除，双向链表在删除结点时，直接找到要删除结点的</span></span><br><span class="line">    <span class="comment">// 地址即可，单链表需要找到被删除结点的前一个结点的地址</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; i &amp;&amp; temp != <span class="literal">NULL</span>; j++)</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (j &gt; i || temp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"找不到要删除的序号为 %d 结点\n"</span>, i);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 要删除的是尾结点</span></span><br><span class="line">    <span class="keyword">if</span> (temp-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        temp-&gt;prior-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp-&gt;prior-&gt;next = temp-&gt;next;</span><br><span class="line">        temp-&gt;next-&gt;prior = temp-&gt;prior;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d 号结点删除成功!\n"</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">list</span> pHead = <span class="literal">NULL</span>;</span><br><span class="line">    InitList(&amp;pHead);</span><br><span class="line">    AddNode(pHead);</span><br><span class="line">    PrintList(pHead-&gt;next);</span><br><span class="line">    <span class="comment">// 数字为要删除的结点序号</span></span><br><span class="line">    DeleteSerial(pHead, <span class="number">0</span>);</span><br><span class="line">    DeleteSerial(pHead, <span class="number">6</span>);</span><br><span class="line">    PrintList(pHead-&gt;next);</span><br><span class="line">    OrderAndReverseOrderPrint(pHead);</span><br><span class="line">    AddBySerial(pHead, <span class="number">6</span>, <span class="number">6</span>);</span><br><span class="line">    PrintList(pHead-&gt;next);</span><br><span class="line">    OrderAndReverseOrderPrint(pHead);</span><br><span class="line"></span><br><span class="line">    AddBySerial(pHead, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    PrintList(pHead-&gt;next);</span><br><span class="line">    OrderAndReverseOrderPrint(pHead);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>双向链表</tag>
      </tags>
  </entry>
  <entry>
    <title>动态数组操作</title>
    <url>/2020/10/02/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>​     动态数组操作均封装成函数，涉及到的操作有：</p>
<ol>
<li>动态数组初始化</li>
<li>打印</li>
<li>添加元素</li>
<li>删除元素</li>
</ol>
<a id="more"></a>

<p>代码附上</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动态数组</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InitialSize 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EachIncreaseSize 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BatchAddNumber 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DynamicArray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *<span class="built_in">array</span>;</span><br><span class="line">    <span class="keyword">int</span> arrayLenth;</span><br><span class="line">    <span class="keyword">int</span> initialSize;</span><br><span class="line">&#125; DynamicArray;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化动态数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitialList</span><span class="params">(DynamicArray *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过手动输入给数组批量、顺序添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddElement</span><span class="params">(DynamicArray *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintArray</span><span class="params">(DynamicArray)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动给数组批量、顺序添加元素</span></span><br><span class="line"><span class="comment">// 自动添加多少请改变 宏定义BatchAddNumer 的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BatchAdd</span><span class="params">(DynamicArray *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertElement</span><span class="params">(DynamicArray *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeletElement</span><span class="params">(DynamicArray *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DynamicArray <span class="built_in">list</span>;</span><br><span class="line">    InitialList(&amp;<span class="built_in">list</span>);</span><br><span class="line">    <span class="comment">//  AddElement(&amp;list);</span></span><br><span class="line">    BatchAdd(&amp;<span class="built_in">list</span>);</span><br><span class="line">    PrintArray(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">    InsertElement(&amp;<span class="built_in">list</span>);</span><br><span class="line">    PrintArray(<span class="built_in">list</span>);</span><br><span class="line">    DeletElement(&amp;<span class="built_in">list</span>);</span><br><span class="line">    PrintArray(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"==========================\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitialList</span><span class="params">(DynamicArray *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 在堆区申请100个int类型长度的内存</span></span><br><span class="line">    <span class="comment">// 将这块内存的首地址存入结构体中的arry指针</span></span><br><span class="line">    p-&gt;<span class="built_in">array</span> = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(InitialSize * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="comment">// 数组长度为0</span></span><br><span class="line">    p-&gt;arrayLenth = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 数组初始化时，可存放的int数据长度为100</span></span><br><span class="line">    p-&gt;initialSize = InitialSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddElement</span><span class="params">(DynamicArray *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, n;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要添加元素的数量 \n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i = p-&gt;arrayLenth; i &lt; p-&gt;arrayLenth + n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入第%d个要添加的元素: "</span>, ++j);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, (p-&gt;<span class="built_in">array</span>) + i);</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;arrayLenth += n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintArray</span><span class="params">(DynamicArray <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    Print();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"当前数组信息:\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"当前数组长度为 %d \n"</span>, <span class="built_in">list</span>.arrayLenth);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"当前数组容量为 %d \n"</span>, <span class="built_in">list</span>.initialSize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"打印数组\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.arrayLenth; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, (<span class="built_in">list</span>.<span class="built_in">array</span>)[i]);</span><br><span class="line">   	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    Print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BatchAdd</span><span class="params">(DynamicArray *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, j = p-&gt;arrayLenth; i &lt; BatchAddNumber; i++)</span><br><span class="line">        (p-&gt;<span class="built_in">array</span>)[j++] = i + <span class="number">1</span>;</span><br><span class="line">    p-&gt;arrayLenth += BatchAddNumber;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertElement</span><span class="params">(DynamicArray *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, n;</span><br><span class="line">    <span class="keyword">int</span> *x = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> *y = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> *temp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要插入到第几位\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; (p-&gt;arrayLenth + <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;arrayLenth &gt;= p-&gt;initialSize)</span><br><span class="line">        temp = (<span class="keyword">int</span>*)<span class="built_in">realloc</span>(p-&gt;<span class="built_in">array</span>, (InitialSize + EachIncreaseSize) * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">if</span>(temp == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    <span class="comment">// if temp != NULL &amp;&amp; temp != p, 说明realloc函数没有在原来开辟的后面加空间</span></span><br><span class="line">    <span class="comment">// 而是又开辟了一块大内存，因此原来开辟的内存应该被释放掉</span></span><br><span class="line">    p-&gt;initialSize += EachIncreaseSize;</span><br><span class="line">    <span class="keyword">if</span>(temp != p-&gt;<span class="built_in">array</span>)</span><br><span class="line">        <span class="built_in">free</span>(p-&gt;<span class="built_in">array</span>);</span><br><span class="line">    p-&gt;<span class="built_in">array</span> = temp;</span><br><span class="line">    x = (p-&gt;<span class="built_in">array</span>) + i - <span class="number">1</span>;</span><br><span class="line">    y = (p-&gt;<span class="built_in">array</span>) + p-&gt;arrayLenth - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"要插入元素的值是多少\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>(y &gt;= x)</span><br><span class="line">    &#123;</span><br><span class="line">        *(y + <span class="number">1</span>) = *y;</span><br><span class="line">        y--;</span><br><span class="line">    &#125;</span><br><span class="line">    *x = n;</span><br><span class="line">    p-&gt;arrayLenth++;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeletElement</span><span class="params">(DynamicArray * plist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> &amp;arryLenth = plist-&gt;arrayLenth;</span><br><span class="line">    <span class="keyword">int</span> * arry = plist-&gt;<span class="built_in">array</span>;</span><br><span class="line">    <span class="keyword">int</span> *p = <span class="literal">NULL</span>, *q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要删除第几个元素\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; arryLenth)</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    p = arry + i - <span class="number">1</span>;</span><br><span class="line">    q = arry + arryLenth - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p &lt;= q)</span><br><span class="line">    &#123;</span><br><span class="line">        *p = *(p + <span class="number">1</span>);</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">    arryLenth--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>动态数组</tag>
      </tags>
  </entry>
  <entry>
    <title>头指针单向链表基本操作</title>
    <url>/2020/10/04/%E5%A4%B4%E6%8C%87%E9%92%88%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>感觉每次自己提前写的东西都和老师讲的书上内容不太一样= =<br>当然大多数是老师讲的更正规一些，毕竟我只是一个会了链表本质就瞎玩的人<br>属于自己琢磨，自己造的那种，很多东西也是不怎么规范<br>但是有的东西我就觉得自己的更好<br>比如下面所说……</p>
<a id="more"></a>

<p>课本上写的是以头指针为基本单位，每次开一个头指针，即可视为开辟了一个链表。</p>
<p>而我参考了动态数组静态数组的写法，将头指针作为了结构体中的一个成员变量，另一个成员变量存储这个链表的长度。每次开一个结构体变量，视为开辟了一个链表。</p>
<p>谈一下我的做法的优越性：</p>
<p>在插入删除的时候，我可以在一开始就判断要插入或删除的结点序号是否存在，因为我有链表的长度，如果结点序号非法，那么直接终止就可以了。然而书上的做法，它只有一个头指针(头结点)，因此在插入删除的时候需要先去遍历，至于结点序号存不存在则需要在遍历完之后才能知道。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表尾添加的结点中数据域的内容data</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TAIL_ADD_NODE_DATA_NUMBER 6</span></span><br><span class="line"><span class="comment">// 要删除的结点的序列号</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELETED_NODE_SERIAL 1</span></span><br><span class="line"><span class="comment">// 要删除的结点中存的数据</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELETED_NODE_DATA 1</span></span><br><span class="line"><span class="comment">// 初始化的链表长度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INITIAL_LENGTH 5</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node, *List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">pHead</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 一个头指针可以确定一个链表</span></span><br><span class="line">    List pHead;</span><br><span class="line">    <span class="comment">// 这里标上链表的长度可以省去很多麻烦</span></span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125; LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(LinkList)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitializeList</span><span class="params">(LinkList &amp;)</span></span>;</span><br><span class="line"><span class="comment">// 在链表尾添加一个结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddTail</span><span class="params">(LinkList &amp;, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="comment">// 插入一个 数据域 data = n的结点， 并且使之成为链表中第i个结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertNode</span><span class="params">(LinkList *, <span class="keyword">int</span> i, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="comment">// 删除第 i 个结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteNodeBySerialNumber</span><span class="params">(LinkList *, <span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="comment">// 删除 data = n 的结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteNodeByContainedData</span><span class="params">(LinkList &amp;, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="comment">// 释放链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FreeList</span><span class="params">(LinkList &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 每使用一次LinkList，就相当于开辟了一个链表</span></span><br><span class="line">    LinkList <span class="built_in">list</span>;</span><br><span class="line">    <span class="comment">// 初始化链表</span></span><br><span class="line">    <span class="built_in">list</span>.pHead = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">list</span>.length = <span class="number">0</span>;</span><br><span class="line">    InitializeList(<span class="built_in">list</span>);</span><br><span class="line">    PrintList(<span class="built_in">list</span>);</span><br><span class="line">    AddTail(<span class="built_in">list</span>, TAIL_ADD_NODE_DATA_NUMBER);</span><br><span class="line">    PrintList(<span class="built_in">list</span>);</span><br><span class="line">    DeleteNodeBySerialNumber(&amp;<span class="built_in">list</span>, DELETED_NODE_SERIAL);</span><br><span class="line">    PrintList(<span class="built_in">list</span>);</span><br><span class="line">    DeleteNodeBySerialNumber(&amp;<span class="built_in">list</span>, <span class="number">2</span>);</span><br><span class="line">    PrintList(<span class="built_in">list</span>);</span><br><span class="line">    InsertNode(&amp;<span class="built_in">list</span>, <span class="number">1</span>, <span class="number">7</span>);</span><br><span class="line">    PrintList(<span class="built_in">list</span>);</span><br><span class="line">    InsertNode(&amp;<span class="built_in">list</span>, <span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">    PrintList(<span class="built_in">list</span>);</span><br><span class="line">    InsertNode(&amp;<span class="built_in">list</span>, <span class="number">7</span>, <span class="number">100</span>);</span><br><span class="line">    PrintList(<span class="built_in">list</span>);</span><br><span class="line">    DeleteNodeBySerialNumber(&amp;<span class="built_in">list</span>, <span class="number">7</span>);</span><br><span class="line">    PrintList(<span class="built_in">list</span>);</span><br><span class="line">    FreeList(<span class="built_in">list</span>);</span><br><span class="line">    PrintList(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"******************************************\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(LinkList <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List temp = <span class="built_in">list</span>.pHead;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"当前链表长度为 %d\n"</span>, <span class="built_in">list</span>.length);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">list</span>.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"打印链表内容\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, temp-&gt;data);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    Print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitializeList</span><span class="params">(LinkList &amp;<span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"初始化链表...\n"</span>);</span><br><span class="line">    List temp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; INITIAL_LENGTH; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        List p = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;data = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">list</span>.pHead = p;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            temp-&gt;next = p;</span><br><span class="line">        temp = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">list</span>.length = INITIAL_LENGTH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddTail</span><span class="params">(LinkList &amp;<span class="built_in">list</span>, <span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"向链表末尾添加 数据域data = %d的结点...\n"</span>, data);</span><br><span class="line">    List p = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    p-&gt;data = data;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 检查链表是否为空，如果是空链表，则需要改变头指针</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span>.pHead == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">list</span>.pHead-&gt;next = p;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        List temp = <span class="built_in">list</span>.pHead;</span><br><span class="line">        <span class="keyword">while</span> (temp-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        temp-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">list</span>.length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteNodeBySerialNumber</span><span class="params">(LinkList *pList, <span class="keyword">int</span> serial)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!((serial &gt;= <span class="number">1</span>) &amp;&amp; (serial &lt;= pList-&gt;length)))</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"删除第%d个结点..."</span>, serial);</span><br><span class="line">    List deletedNode = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果只删除第一个，要删除的结点是没有上一个结点的，其实找上一个</span></span><br><span class="line">    <span class="comment">// 结点的意义也就无非是要找到这个结点的地址，然后改变上一个结点中指针域</span></span><br><span class="line">    <span class="comment">// 的指向，让上一个结点指向被删除的结点指向的结点。</span></span><br><span class="line">    <span class="comment">// 综上所述，删除结点就是要找到前指针。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (serial == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        deletedNode = pList-&gt;pHead;</span><br><span class="line">        pList-&gt;pHead = pList-&gt;pHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        List temp = pList-&gt;pHead;</span><br><span class="line">        <span class="comment">// 请细细思考for循环中为什么初始化i = 1</span></span><br><span class="line">        <span class="comment">// 并且用 i &lt; serial - 1 作为判断条件</span></span><br><span class="line">        <span class="comment">// 其中有坑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; serial - <span class="number">1</span>; i++)</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        deletedNode = temp-&gt;next;</span><br><span class="line">        temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(deletedNode);</span><br><span class="line">    pList-&gt;length--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertNode</span><span class="params">(LinkList *pList, <span class="keyword">int</span> serial, <span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"在第%d号位插入一个数据域为data = %d的结点...\n"</span>, serial, data);</span><br><span class="line">    <span class="keyword">if</span> (!((serial &gt;= <span class="number">1</span>) &amp;&amp; (serial &lt;= pList-&gt;length + <span class="number">1</span>)))</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    List p = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    p-&gt;data = data;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (serial == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;next = pList-&gt;pHead;</span><br><span class="line">        pList-&gt;pHead = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        List temp = pList-&gt;pHead;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; serial - <span class="number">1</span>; i++)</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        p-&gt;next = temp-&gt;next;</span><br><span class="line">        temp-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">    pList-&gt;length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FreeList</span><span class="params">(LinkList &amp;<span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"释放链表在堆区开辟的所有空间...\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">list</span>.pHead != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        List deletedNode = <span class="built_in">list</span>.pHead;</span><br><span class="line">        <span class="built_in">list</span>.pHead = (<span class="built_in">list</span>.pHead)-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(deletedNode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">list</span>.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>单链表基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>循环链表的打印 合并</title>
    <url>/2020/10/02/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E7%9A%84%E6%89%93%E5%8D%B0-%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<p>本文中的所有操作均使用 <strong>设有尾指针的循环链表</strong>完成，目前只写了打印和合并两个操作，后续持续更新~</p>
<a id="more"></a>

<p>看名字都可以知道，<code>使用尾指针的循环链表</code>和<code>使用头指针单链表</code>的区别</p>
<ul>
<li>顾名思义，很容易就看出它们两个有以下这两个区别：</li>
</ul>
<ol>
<li><p>前者没有头指针，只有尾指针，尾指针存的是尾结点的地址，即它指向尾结点，<code>尾指针-&gt;next</code> 就得到了头结点的地址</p>
</li>
<li><p>前者的尾结点指向第一个结点，后者的尾结点中指针域的内容为<code>NULL</code></p>
</li>
</ol>
<p><code>尾指针的循环链表</code>在合并的时候很容易，只需要改变两个尾指针的指向，就可以完成合并工作的 99%，改变两个指针的指向还需要引入一个中间指针变量来存第一个被改变的指针，否者这个指针被改变以后，它指向的内容就找不到了。</p>
<p>假设是链表1接上了链表2，这样的话链表2的尾指针肯定就顺理成章地成为了整个链表的尾指针。那么剩余1 %的细节则是链表1 的尾指针已经失去意义了，销毁掉，或者将它赋值为链表2的值，也就是让它成为合并了以后的链表的尾指针。</p>
<p><strong>代码附上</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 循环链表操作 秀起来~</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CYCLECOUNTS 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放纵不羁爱自由，打印循环链表6次</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CyclePrint</span><span class="params">(Node *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并两个尾指针的循环链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeList</span><span class="params">(Node **, Node *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印循环链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(Node *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 开辟两个循环链表</span></span><br><span class="line">	<span class="comment">// 循环链表1    11 -&gt; 12  -&gt;  13  -&gt;  11 ......</span></span><br><span class="line">	<span class="comment">// 循环链表2    21 -&gt; 22  -&gt;  23  -&gt;  24  -&gt;  21 ......</span></span><br><span class="line">	Node * tail_1 = <span class="literal">NULL</span>;</span><br><span class="line">	Node * tail_2 = <span class="literal">NULL</span>;</span><br><span class="line">	Node node11, node12, node13;</span><br><span class="line">	Node node21, node22, node23, node24;</span><br><span class="line">	node11.data = <span class="number">11</span>; node11.next = &amp;node12;</span><br><span class="line">	node12.data = <span class="number">12</span>; node12.next = &amp;node13;</span><br><span class="line">	node13.data = <span class="number">13</span>; node13.next = &amp;node11;</span><br><span class="line">	tail_1 = &amp;node13;</span><br><span class="line">	node21.data = <span class="number">21</span>; node21.next = &amp;node22;</span><br><span class="line">	node22.data = <span class="number">22</span>; node22.next = &amp;node23;</span><br><span class="line">	node23.data = <span class="number">23</span>; node23.next = &amp;node24;</span><br><span class="line">	node24.data = <span class="number">24</span>; node24.next = &amp;node21;</span><br><span class="line">	tail_2 = &amp;node24;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"循环打印%d次\n"</span>, CYCLECOUNTS);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"循环打印链表1\n"</span>);</span><br><span class="line">	CyclePrint(tail_1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"循环打印链表2\n"</span>);</span><br><span class="line">	CyclePrint(tail_2);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"打印循环链表1\n"</span>);</span><br><span class="line">	Print(tail_1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"打印循环链表2\n"</span>);</span><br><span class="line">	Print(tail_2);</span><br><span class="line">	MergeList(&amp;tail_1, tail_2);</span><br><span class="line">	<span class="comment">// 两个尾指针现在都指向的是第二个链表尾</span></span><br><span class="line">	<span class="comment">// 故无论传参给谁，都会打印出合并后的链表</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"打印合并后的链表(传参 Node * tail_1)\n"</span>);</span><br><span class="line">	Print(tail_1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"打印合并后的链表(传参 Node * tail_2)\n"</span>);</span><br><span class="line">	Print(tail_2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(Node * pTail)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">	Node * temp = pTail-&gt;next;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, temp-&gt;data);</span><br><span class="line">		temp = temp-&gt;next;</span><br><span class="line">	&#125; <span class="keyword">while</span> (temp != pTail-&gt;next);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CyclePrint</span><span class="params">(Node * pTail)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">	Node * temp = pTail-&gt;next;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(temp == pTail-&gt;next)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(i == (CYCLECOUNTS + <span class="number">1</span>))</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"第1次循环\n"</span>);</span><br><span class="line">			<span class="keyword">if</span>(i &gt; <span class="number">1</span>)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"\n第%d次循环\n"</span>, i);</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, temp-&gt;data);</span><br><span class="line">		temp = temp-&gt;next;</span><br><span class="line">	&#125; <span class="keyword">while</span> (temp != <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeList</span><span class="params">(Node** ppTail1, Node * pTail2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Node * temp = (*ppTail1)-&gt;next;</span><br><span class="line">	(*ppTail1)-&gt;next = pTail2-&gt;next;</span><br><span class="line">	pTail2-&gt;next = temp;</span><br><span class="line">	*ppTail1 = pTail2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>打印、合并循环链表</tag>
      </tags>
  </entry>
  <entry>
    <title>合并两个有序链表</title>
    <url>/2020/09/29/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>两个有序链表合并为一个有序链表。链表的一个简单操作。</p>
<a id="more"></a>

<h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>今天下午不到一个多小时，好吧，全在搞这个东西。</p>
<p>总结了一下自己为什么这么慢</p>
<p>不是它难，而是方法有问题</p>
<ol>
<li>确定正确的方向：不要空想，一定要看看这个方向走下去到底行不行，否则费事费力最后发现路是死的。在写这个合并有序链表的算法的时候，我竟凭感觉地认为可以不开辟新的内存空间，直接改变原来链表结点之间的指向就可以完成对链表的合并。当然这种算法肯定是存在的，但是目前不在我的能力范围之内。</li>
<li>确定了正确的方向以后，还要在纸上写出整体的关键思路步骤以后，再去敲代码，不要上来就敲，否则敲代码也会走错方向，只不过这个确定的是进一步的具体的代码怎么敲的方向。</li>
</ol>
<h3 id="代码附上"><a href="#代码附上" class="headerlink" title="代码附上"></a>代码附上</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里宏定义链表1和链表2的长度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTONE_LEN 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTTWO_LEN 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node, *pNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddNode</span><span class="params">(pNode, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并两个链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeTwoList</span><span class="params">(pNode, pNode, pNode)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 对两个头结点初始化</span></span><br><span class="line">    Node headNode1, headNode2, headNode3;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    headNode1.data = <span class="number">1</span>;</span><br><span class="line">    headNode2.data = <span class="number">2</span>;</span><br><span class="line">    headNode3.data = <span class="number">3</span>;</span><br><span class="line">    headNode1.next = <span class="literal">NULL</span>;</span><br><span class="line">    headNode2.next = <span class="literal">NULL</span>;</span><br><span class="line">    headNode3.next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    AddNode(&amp;headNode1, LISTONE_LEN);</span><br><span class="line"></span><br><span class="line">    AddNode(&amp;headNode2, LISTTWO_LEN);</span><br><span class="line"></span><br><span class="line">    PrintList(headNode1);</span><br><span class="line">    PrintList(headNode2);</span><br><span class="line">    MergeTwoList(&amp;headNode1, &amp;headNode2, &amp;headNode3);</span><br><span class="line">    PrintList(headNode3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddNode</span><span class="params">(pNode pHeadNode, <span class="keyword">int</span> lenth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    pNode temp = pHeadNode;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lenth; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pNode pNewNode = (pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">if</span> (pHeadNode-&gt;data == <span class="number">1</span>)</span><br><span class="line">            pNewNode-&gt;data = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pNewNode-&gt;data = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        temp-&gt;next = pNewNode;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(Node headNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pNode temp = headNode.next;</span><br><span class="line">    <span class="keyword">if</span> (headNode.data == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"遍历链表1：\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (headNode.data == <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"遍历链表2：\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"遍历合并后的链表：\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, temp-&gt;data);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeTwoList</span><span class="params">(pNode pHeadNode1, pNode pHeadNode2, pNode pHeadNode3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// p, q 分别为两个链表的第一个节点的地址</span></span><br><span class="line">    <span class="comment">// r赋值为第三个链表的头结点的地址</span></span><br><span class="line">    pNode p = pHeadNode1-&gt;next;</span><br><span class="line">    pNode q = pHeadNode2-&gt;next;</span><br><span class="line">    pNode r = pHeadNode3;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; q != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data &lt; q-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            r-&gt;next = p;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            r = r-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            r-&gt;next = q;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">            r = r-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r-&gt;next = p;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            r = r-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">while</span> (q != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r-&gt;next = q;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">            r = r-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>链表合并</tag>
      </tags>
  </entry>
  <entry>
    <title>循环队列</title>
    <url>/2020/10/22/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<p>循环队列，底层内存结构：静态数组</p>
<p>灵魂思想: 将指针的自增改为   <code>指针 = (指针+ 1) % (数组的真实长度)</code></p>
<a id="more"></a>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 循环队列</span></span><br><span class="line"><span class="comment">// 为了区分空队列和满队列</span></span><br><span class="line"><span class="comment">// 在这里我们认为当整个数组只剩下队尾的那块空间时，队列已满</span></span><br><span class="line"><span class="comment">// 当对头和队尾相等时，列队空</span></span><br><span class="line"><span class="comment">// 因此 队列中成员个数的最大值是 MAX_SIZE - 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVER_FLOW -99</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DuiLie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> arr[MAX_SIZE];</span><br><span class="line">    <span class="comment">// front为队头</span></span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="comment">// pear为队尾</span></span><br><span class="line">    <span class="keyword">int</span> pear;</span><br><span class="line">&#125; Sql;</span><br><span class="line"><span class="comment">// 打印分割线</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DivideLine</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"------------------------------\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 队列的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitSql</span><span class="params">(Sql *pSql)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pSql-&gt;front = <span class="number">0</span>;</span><br><span class="line">    pSql-&gt;pear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_SIZE; i++)</span><br><span class="line">        pSql-&gt;arr[i] = i;</span><br><span class="line">    pSql-&gt;front = <span class="number">6</span>;</span><br><span class="line">    pSql-&gt;pear = <span class="number">8</span>;</span><br><span class="line">    <span class="comment">// 队头在6，队尾在3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从队头到队尾依次打印队列元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintSql</span><span class="params">(Sql sql)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 先判断是不是空队列</span></span><br><span class="line">    <span class="keyword">if</span> (sql.front == sql.pear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"当前队列信息:空队列\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"front下标为 %d, pear 下标为 %d\n"</span>, sql.front, sql.pear);</span><br><span class="line">        DivideLine();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果pear在front的前面那么说明现在是循环队列了</span></span><br><span class="line">    <span class="keyword">int</span> length = ((sql.pear - sql.front) + MAX_SIZE) % MAX_SIZE;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"当前队列长度为 %d\n"</span>, length);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"front下标为 %d, pear 下标为 %d\n"</span>, sql.front, sql.pear);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"打印队列:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, sql.arr[(sql.front + i) % MAX_SIZE]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    DivideLine();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 求队列长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">(Sql sql)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = (sql.pear - sql.front + MAX_SIZE) % MAX_SIZE;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InSql</span><span class="params">(Sql *pSql, <span class="keyword">int</span> inNumber)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果队尾+1 == 队头 即认为队列已满</span></span><br><span class="line">    <span class="comment">// 正常情况下队尾在队头的后面</span></span><br><span class="line">    <span class="comment">// 当循环队列的时候 队尾在队头的前面</span></span><br><span class="line">    <span class="keyword">if</span> (((pSql-&gt;pear + <span class="number">1</span>) % MAX_SIZE) == pSql-&gt;front)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列已满！\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 入队的时候，上回的rear指向哪，就往哪里存元素</span></span><br><span class="line">    pSql-&gt;arr[pSql-&gt;pear] = inNumber;</span><br><span class="line">    <span class="comment">// 入队的时候可能会从普通队列转换成循环队列</span></span><br><span class="line">    <span class="comment">// 当入队前pear表示数组的最后一个元素的下标时</span></span><br><span class="line">    <span class="comment">// 数组最后一个元素</span></span><br><span class="line">    pSql-&gt;pear = (pSql-&gt;pear + <span class="number">1</span>) % MAX_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OutSql</span><span class="params">(Sql *pSql, <span class="keyword">int</span> *pOutNumber)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 先判断是不是空队列</span></span><br><span class="line">    <span class="keyword">if</span> (pSql-&gt;front == pSql-&gt;pear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"空队列...出队失败！\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(OVER_FLOW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="comment">// 先将队头元素赋给传进来的变量</span></span><br><span class="line">    *pOutNumber = pSql-&gt;arr[pSql-&gt;front];</span><br><span class="line">    <span class="comment">// 然后改变front表示的下标</span></span><br><span class="line">    pSql-&gt;front = (pSql-&gt;front + <span class="number">1</span>) % MAX_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sql sql;</span><br><span class="line">    InitSql(&amp;sql);</span><br><span class="line">    PrintSql(sql);</span><br><span class="line">    <span class="comment">// 要传一个入队元素过去</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        InSql(&amp;sql, i);</span><br><span class="line">        PrintSql(sql);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> outNumber;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        OutSql(&amp;sql, &amp;outNumber);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"取出的队列元素为 %d \n"</span>, outNumber);</span><br><span class="line">        PrintSql(sql);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>循环队列</tag>
      </tags>
  </entry>
  <entry>
    <title>稀疏矩阵转置</title>
    <url>/2020/10/30/%E7%9F%A9%E9%98%B5%E8%BD%AC%E7%BD%AE%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<center>稀疏矩阵的转置</center>

<a id="more"></a>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LENGTH 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个用来表示非零元素的结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">a</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 非零元素的行下标</span></span><br><span class="line">    <span class="keyword">int</span> rowIndex;</span><br><span class="line">    <span class="comment">// 非零元素的列下标</span></span><br><span class="line">    <span class="keyword">int</span> colIndex;</span><br><span class="line">    <span class="comment">// 非零元素的值</span></span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">&#125; NotZeroMember;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个表示矩阵的结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">b</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 开一个数组用于存储非零元素</span></span><br><span class="line">    NotZeroMember <span class="built_in">array</span>[MAX_LENGTH];</span><br><span class="line">    <span class="comment">// 数组长度 即该矩阵中非零元素的个数</span></span><br><span class="line">    <span class="keyword">int</span> arrayLength;</span><br><span class="line">    <span class="comment">// 矩阵的行数和列数</span></span><br><span class="line">    <span class="keyword">int</span> rows, cols;</span><br><span class="line"></span><br><span class="line">&#125; Matrix;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 开一个稀疏矩阵</span></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>][<span class="number">7</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>,</span><br><span class="line">                     <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                     <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                     <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                     <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>&#125;;</span><br><span class="line">    <span class="comment">// 将稀疏矩阵压缩</span></span><br><span class="line"></span><br><span class="line">    Matrix matrix;</span><br><span class="line">    matrix.rows = <span class="number">5</span>;</span><br><span class="line">    matrix.cols = <span class="number">7</span>;</span><br><span class="line">    matrix.arrayLength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i][j] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 行</span></span><br><span class="line">                matrix.<span class="built_in">array</span>[++matrix.arrayLength].rowIndex = i + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 列</span></span><br><span class="line">                matrix.<span class="built_in">array</span>[matrix.arrayLength].colIndex = j + <span class="number">1</span>;</span><br><span class="line">                matrix.<span class="built_in">array</span>[matrix.arrayLength].number = arr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= matrix.arrayLength; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d行  %d列  元素值：%d\n"</span>, matrix.<span class="built_in">array</span>[i].rowIndex,</span><br><span class="line">               matrix.<span class="built_in">array</span>[i].colIndex, matrix.<span class="built_in">array</span>[i].number);</span><br><span class="line">    <span class="comment">// 开始转置矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// num数组用于记录原矩阵每列有几个非0元素</span></span><br><span class="line">    <span class="comment">// num数组中对应的下标就是对应的列序号</span></span><br><span class="line">    <span class="keyword">int</span> num[matrix.cols + <span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= matrix.arrayLength; i++)</span><br><span class="line">        num[matrix.<span class="built_in">array</span>[i].colIndex]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= matrix.cols; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"第 %d 列有 %d 个非零元素\n"</span>, i, num[i]);</span><br><span class="line">    <span class="comment">// location 数组用于记录转置前每列的首个非零元素(即转置后每行的首个非0元素)</span></span><br><span class="line">    <span class="comment">// 在转置以后的被压缩以后的数组里的下标</span></span><br><span class="line">    <span class="keyword">int</span> location[matrix.cols + <span class="number">1</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= matrix.cols; i++)</span><br><span class="line">        location[i] = location[i - <span class="number">1</span>] + num[i - <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"location数组:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= matrix.cols; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, location[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="comment">// 数组转置</span></span><br><span class="line">    Matrix comperssedMatrix;</span><br><span class="line">    comperssedMatrix.cols = matrix.rows;</span><br><span class="line">    comperssedMatrix.rows = matrix.cols;</span><br><span class="line">    comperssedMatrix.arrayLength = matrix.arrayLength;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= matrix.arrayLength; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = location[matrix.<span class="built_in">array</span>[i].colIndex];</span><br><span class="line">        comperssedMatrix.<span class="built_in">array</span>[t].number = matrix.<span class="built_in">array</span>[i].number;</span><br><span class="line">        comperssedMatrix.<span class="built_in">array</span>[t].colIndex = matrix.<span class="built_in">array</span>[i].rowIndex;</span><br><span class="line">        comperssedMatrix.<span class="built_in">array</span>[t].rowIndex = matrix.<span class="built_in">array</span>[i].colIndex;</span><br><span class="line">        location[matrix.<span class="built_in">array</span>[i].colIndex]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= comperssedMatrix.arrayLength; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d行  %d列  元素值：%d\n"</span>, comperssedMatrix.<span class="built_in">array</span>[i].rowIndex,</span><br><span class="line">               comperssedMatrix.<span class="built_in">array</span>[i].colIndex, comperssedMatrix.<span class="built_in">array</span>[i].number);</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 打印原来的数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d   "</span>, arr[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"================\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-----转置后-----\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"================\n"</span>);</span><br><span class="line">    <span class="comment">// 打印转置后的数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= comperssedMatrix.rows; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= comperssedMatrix.cols; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == comperssedMatrix.<span class="built_in">array</span>[index].rowIndex &amp;&amp; j == comperssedMatrix.<span class="built_in">array</span>[index].rowIndex)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d   "</span>, comperssedMatrix.<span class="built_in">array</span>[index].number);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"0   "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>稀疏矩阵转置</tag>
      </tags>
  </entry>
  <entry>
    <title>学生信息管理系统</title>
    <url>/2020/07/01/%E9%93%BE%E8%A1%A8%E9%A1%B9%E7%9B%AE-%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>这是一个用C语言实现，以单向链表为核心，用于管理数据的小项目，功能尚不完备，后续持续更新。</p>
<a id="more"></a>

<h2 id="核心知识"><a href="#核心知识" class="headerlink" title="核心知识"></a>核心知识</h2><p>单向链表基本操作+对文件的基本操作</p>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ul>
<li>请先建好一个<code>.txt</code> 文件并记下路径名，文件可以为空，也可以预先存好数据</li>
<li>建议创建一个空文件，通过程序来向文件中存数据。</li>
<li>手动去文件中存数据需要严格按照格式。</li>
</ul>
<blockquote>
<h3 id="预先存好的数据需要按照以下格式："><a href="#预先存好的数据需要按照以下格式：" class="headerlink" title="预先存好的数据需要按照以下格式："></a><strong>预先存好的数据需要按照以下格式：</strong></h3><hr>
<p>姓名1    语文    数学    英语    计算机    C语言    平均分    总分1<br>…<br>姓名n    语文    数学    英语    计算机    C语言    平均分    总分n</p>
<hr>
<h3 id="按照上述格式存数据的同时，需要注意以下两点："><a href="#按照上述格式存数据的同时，需要注意以下两点：" class="headerlink" title="按照上述格式存数据的同时，需要注意以下两点："></a>按照上述格式存数据的同时，需要注意以下两点：</h3><ol>
<li>某些编译器不支持中文字符的读写操作(VS2012支持)，因此，<code>姓名</code>可能不支持中文。<br> <strong>不论是预先在文件里存数据，还是通过程序向文件中存数据，都应该注意这一点。</strong></li>
<li>文件结尾，也就是文件内容的最后一行的<code>总分n</code>后面<code>不要有任何字符</code>。</li>
</ol>
</blockquote>
<h2 id="代码附上"><a href="#代码附上" class="headerlink" title="代码附上"></a>代码附上</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXNAME 30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSUBJECT 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPACE <span class="meta-string">' '</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[MAXNAME];</span><br><span class="line">    <span class="keyword">int</span> score[MAXSUBJECT];</span><br><span class="line">    <span class="keyword">double</span> aver;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line"></span><br><span class="line">&#125; STUDENT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    STUDENT data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125; NODE, *LIST;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i, choice;</span><br><span class="line"><span class="keyword">char</span> ch, c, c2;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">10</span>] = <span class="string">"name"</span>;</span><br><span class="line"><span class="keyword">char</span> s2[<span class="number">10</span>] = <span class="string">"average"</span>;</span><br><span class="line"><span class="keyword">char</span> s3[<span class="number">10</span>] = <span class="string">"sum"</span>;</span><br><span class="line"><span class="keyword">char</span> s4[<span class="number">10</span>] = <span class="string">"chinese"</span>;</span><br><span class="line"><span class="keyword">char</span> s5[<span class="number">10</span>] = <span class="string">"math"</span>;</span><br><span class="line"><span class="keyword">char</span> s6[<span class="number">10</span>] = <span class="string">"english"</span>;</span><br><span class="line"><span class="keyword">char</span> s7[<span class="number">10</span>] = <span class="string">"computer"</span>;</span><br><span class="line"><span class="keyword">char</span> s8[<span class="number">10</span>] = <span class="string">"c"</span>;</span><br><span class="line"><span class="keyword">char</span> FileName[<span class="number">100</span>];</span><br><span class="line">LIST headp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读入文件时，添加链表成员</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddFscanf</span><span class="params">(NODE)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用说明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Instructions</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行完一次操作后，询问是否继续</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ask</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印分割线</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SplitLine</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作1，用户输入时，添加链表成员，</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddUserInput</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作2，删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作3，查询某个节点信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Inquire</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作4，更新某个节点信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作5，排序学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作6，保存信息到文件中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Save</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作7，打印链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Free</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">    NODE head;</span><br><span class="line">    NODE temp;</span><br><span class="line">    headp = &amp;head;</span><br><span class="line">    head.next = <span class="literal">NULL</span>;</span><br><span class="line">    temp.next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入文件的绝对路径+文件名(仅限 .txt 文件)\n\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"例如，若您要打开D盘根目录下的 info.txt 文件\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"则应输入\"D:/info.txt\"(您输入的字符均应为英文字符)\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, FileName);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(FileName, <span class="string">"r"</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n\"%s\" 打开失败\n\n"</span>, FileName);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n\"%s\" 打开成功!\n"</span>, FileName);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n正在鉴定文件是否为空...\n"</span>);</span><br><span class="line">    c2 = getc(fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">if</span> (c2 == EOF)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"打开的文件为空文件，仅可进行写入操作！\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"文件非空，可进行任意操作\n\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"正在重新打开该文件...\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> ((fp = fopen(FileName, <span class="string">"r"</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"can't open \"%s\" \n"</span>, FileName);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"正在读取该文件中的数据...\n"</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, temp.data.name);</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAXSUBJECT; i++)</span><br><span class="line">                <span class="built_in">fscanf</span>(fp, <span class="string">"%d"</span>, &amp;temp.data.score[i]);</span><br><span class="line">            <span class="built_in">fscanf</span>(fp, <span class="string">"%lf"</span>, &amp;temp.data.aver);</span><br><span class="line">            <span class="built_in">fscanf</span>(fp, <span class="string">"%d"</span>, &amp;temp.data.sum);</span><br><span class="line">            ch = getc(fp);</span><br><span class="line">            AddFscanf(temp);</span><br><span class="line">            <span class="keyword">if</span> (ch == EOF)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"文件数据读取成功!\n"</span>);</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Instructions();</span><br><span class="line">        <span class="keyword">switch</span> (choice)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            AddUserInput();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            Delete();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            Inquire();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            Update();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            Sort();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            Save();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            Print();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Bye~  Have a good day! \n\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Ask();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Free();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Free</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LIST temp = headp-&gt;next;</span><br><span class="line">    LIST deletep = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        deletep = temp;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(deletep);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Save</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    LIST temp = headp-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(FileName, <span class="string">"w"</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"can't open \" %s \" \n"</span>, FileName);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">            <span class="built_in">fprintf</span>(fp, <span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">"%s   "</span>, temp-&gt;data.name);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAXSUBJECT; i++)</span><br><span class="line">            <span class="built_in">fprintf</span>(fp, <span class="string">"%d   "</span>, temp-&gt;data.score[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">"%.2f   "</span>, temp-&gt;data.aver);</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">"%d"</span>, temp-&gt;data.sum);</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n保存成功!"</span>);</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LIST temp = <span class="literal">NULL</span>;</span><br><span class="line">    STUDENT t;</span><br><span class="line">    <span class="keyword">int</span> lenth = <span class="number">0</span>, j;</span><br><span class="line">    <span class="keyword">if</span> (headp-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"数据为空!仅可进行写入操作!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = headp-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        lenth++;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = lenth - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = headp-&gt;next;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp-&gt;data.sum &lt; temp-&gt;next-&gt;data.sum)</span><br><span class="line">            &#123;</span><br><span class="line">                t = temp-&gt;data;</span><br><span class="line">                temp-&gt;data = temp-&gt;next-&gt;data;</span><br><span class="line">                temp-&gt;next-&gt;data = t;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (temp-&gt;data.sum == temp-&gt;next-&gt;data.sum)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strcmp</span>(temp-&gt;data.name, temp-&gt;next-&gt;data.name) &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    t = temp-&gt;data;</span><br><span class="line">                    temp-&gt;data = temp-&gt;next-&gt;data;</span><br><span class="line">                    temp-&gt;next-&gt;data = t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n排序成功!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LIST temp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">char</span> NAME[MAXNAME];</span><br><span class="line">    <span class="keyword">if</span> (headp-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"数据为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = headp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要更新的学生姓名:\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = headp;</span><br><span class="line">        fflush(<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, NAME);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(temp-&gt;data.name, NAME) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"错误！库中没有该学生的信息\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"键入'n'退出该功能，或键入'y'重新输入\n"</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c);</span><br><span class="line">                getchar();</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">'y'</span> || c == <span class="string">'Y'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"请重新输入要更新学生的姓名\n"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'n'</span> || c == <span class="string">'N'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"输入非法!请输入'y'或'n',不要输入其它字符\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp-&gt;data.sum = <span class="number">0</span>;</span><br><span class="line">            temp-&gt;data.aver = <span class="number">0.0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"请依次输入该学生语文、数学、英语、计算机、C语言，五门课的成绩\n"</span>);</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAXSUBJECT; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp-&gt;data.score[i]);</span><br><span class="line">                temp-&gt;data.sum += temp-&gt;data.score[i];</span><br><span class="line">            &#125;</span><br><span class="line">            temp-&gt;data.aver = temp-&gt;data.sum * <span class="number">1.0</span> / MAXSUBJECT;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n更新成功!"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Inquire</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LIST temp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">char</span> NAME[MAXNAME];</span><br><span class="line">    <span class="keyword">if</span> (headp-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"数据为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = headp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要查询的学生姓名:\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = headp;</span><br><span class="line">        fflush(<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, NAME);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(temp-&gt;data.name, NAME) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"错误！库中没有该学生的信息\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"键入'y'重新输入或'n'退出该功能\n"</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c);</span><br><span class="line">                getchar();</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">'y'</span> || c == <span class="string">'Y'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"请重新输入要查询学生的姓名\n"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'n'</span> || c == <span class="string">'N'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"输入非法!请输入'y'或'n',不要输入其它字符\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n\n%s的信息如下:\n\n"</span>, NAME);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%-10s %-8s %-10s %-10s %-10s %-10s %6s\n"</span>,</span><br><span class="line">                   s2, s3, s4, s5, s6, s7, s8);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%-10.2f %-10d"</span>,</span><br><span class="line">                   temp-&gt;data.aver, temp-&gt;data.sum);</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAXSUBJECT; i++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%-12d"</span>, temp-&gt;data.score[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LIST temp = <span class="literal">NULL</span>, deletp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">char</span> NAME[MAXNAME];</span><br><span class="line">    <span class="keyword">if</span> (headp-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"数据为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = headp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要删除的学生的姓名:\n"</span>);</span><br><span class="line">    <span class="comment">// 现在这个情况，链表一定不为空</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = headp;</span><br><span class="line">        fflush(<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, NAME);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="comment">// 搜索要删除的学生姓名所在结点的上一个</span></span><br><span class="line">        <span class="keyword">while</span> (temp-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(temp-&gt;next-&gt;data.name, NAME) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"您要删除的学生不存在,键入'y'重新输入或'n'退出该功能\n"</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                c = getchar();</span><br><span class="line">                getchar();</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">'y'</span> || c == <span class="string">'Y'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"请重新输入学生姓名:\n"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'n'</span> || c == <span class="string">'N'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"输入非法!请重新输入'y' or 'n'\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 要删除的结点是最后一个结点</span></span><br><span class="line">            <span class="keyword">if</span> (temp-&gt;next-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">free</span>(temp-&gt;next);</span><br><span class="line">                temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                deletp = temp-&gt;next;</span><br><span class="line">                temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">                <span class="built_in">free</span>(deletp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n删除成功!"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ask</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n输入'n'结束该信息管理系统，或输入其它任意字符回到菜单\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'n'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nBye~  Have a good day! \n\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddUserInput</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>, flag2 = <span class="number">0</span>;</span><br><span class="line">    LIST newp = <span class="literal">NULL</span>;</span><br><span class="line">    LIST temp = headp-&gt;next;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入学生姓名:\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        newp = (LIST)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        temp = headp-&gt;next;</span><br><span class="line">        fflush(<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, newp-&gt;data.name);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(newp-&gt;data.name, temp-&gt;data.name) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n库中已有该名字，请退回到菜单选择\"更新信息\"或选择重新输入名字\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"是否重新输入?(y/n)\n"</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag2 = <span class="number">0</span>;</span><br><span class="line">                c = getchar();</span><br><span class="line">                getchar();</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">'y'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"\n您选择了'y',请重新输入名字\n"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'n'</span>)</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    flag2 = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"\n请输入'y'或'n'，不要输入其它字符!\n"</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"请重新输入'y'或'n' \n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag2)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp = headp;</span><br><span class="line">            <span class="keyword">while</span> (temp-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">                temp = temp-&gt;next;</span><br><span class="line">            temp-&gt;next = newp;</span><br><span class="line">            newp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            newp-&gt;data.sum = <span class="number">0</span>;</span><br><span class="line">            newp-&gt;data.aver = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"请依次输入该学生语文、数学、英语、计算机、C语言，五门课的成绩\n"</span>);</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAXSUBJECT; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;newp-&gt;data.score[i]);</span><br><span class="line">                newp-&gt;data.sum += newp-&gt;data.score[i];</span><br><span class="line">            &#125;</span><br><span class="line">            newp-&gt;data.aver = newp-&gt;data.sum * <span class="number">1.0</span> / MAXSUBJECT;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n添加成功!\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"是否继续添加?(输入'n'结束该功能，输入其它任意字符继续添加)\n"</span>);</span><br><span class="line">            fflush(<span class="built_in">stdin</span>);</span><br><span class="line">            c = getchar();</span><br><span class="line">            getchar();</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'n'</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n请继续输入要添加的学生的姓名\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddFscanf</span><span class="params">(NODE newNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LIST newp = (LIST)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    LIST temp = headp;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    temp-&gt;next = newp;</span><br><span class="line">    newp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    newp-&gt;data.sum = <span class="number">0</span>;</span><br><span class="line">    newp-&gt;data.aver = <span class="number">0.0</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(newp-&gt;data.name, newNode.data.name);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAXSUBJECT; i++)</span><br><span class="line">        newp-&gt;data.score[i] = newNode.data.score[i];</span><br><span class="line">    newp-&gt;data.sum = newNode.data.sum;</span><br><span class="line">    newp-&gt;data.aver = newNode.data.aver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LIST temp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (headp-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"数据为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = headp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"已存储的数据为:\n"</span>);</span><br><span class="line">    SplitLine();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%-15s %-10s %-8s %-10s %-10s %-10s %-10s %6s\n"</span>,</span><br><span class="line">           s1, s2, s3, s4, s5, s6, s7, s8);</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%-15s %-10.2f %-10d"</span>,</span><br><span class="line">               temp-&gt;next-&gt;data.name, temp-&gt;next-&gt;data.aver,</span><br><span class="line">               temp-&gt;next-&gt;data.sum);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAXSUBJECT; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%-12d"</span>, temp-&gt;next-&gt;data.score[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    SplitLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SplitLine</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n========================================================================================\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Instructions</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n\t   The Student's Grade Management System\n\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"---------------------Student  Menu------------------------\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (headp-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"* 1 输入学生信息\t\t\t * 0 退出学生系统\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"----------------------------------------------------------\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"此时数据为空!仅支持输入学生信息！\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Enter your choice 0 or 1: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"* 1 输入学生信息\t\t\t * 2 删除学生信息\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"* 3 查询学生信息\t\t\t * 4 更新学生信息\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"* 5 排序学生信息\t\t\t * 6 保存学生信息\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"* 7 显示学生信息\t\t\t * 0 退出学生系统\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"----------------------------------------------------------\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Enter your choice [0 - 7]: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;choice);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>链表小项目</tag>
      </tags>
  </entry>
</search>
